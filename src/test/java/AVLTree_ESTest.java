/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 10 23:45:30 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3525);
      aVLTree0.delete(4334);
      aVLTree0.find(4334);
      aVLTree0.delete(4334);
      aVLTree0.insert(4334);
      aVLTree0.insert(2036);
      aVLTree0.delete(3525);
      aVLTree0.delete((-1671));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      aVLTree0.insert(0);
      aVLTree0.delete(2360);
      aVLTree_Node0.height = 3525;
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1327;
      aVLTree0.insert(1327);
      int int1 = 3399;
      aVLTree0.insert(3399);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = 1327;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node1.key = (-304);
      aVLTree_Node0.right = aVLTree_Node1;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert((-2082));
      aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.find(394);
      aVLTree0.getRoot();
      aVLTree0.delete((-2491));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(408);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.find(408);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node0;
      aVLTree_Node0.key = 856;
      int int0 = 0;
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      // Undeclared exception!
      try { 
        aVLTree0.insert(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.insert((-1));
      aVLTree0.find(3448);
      aVLTree0.delete((-4341));
      aVLTree0.insert(1758);
      aVLTree0.insert((-1052));
      aVLTree0.insert(1);
      aVLTree0.insert(3448);
      aVLTree0.delete((-1));
      aVLTree0.insert(223);
      aVLTree0.insert((-1117));
      aVLTree0.insert((-4341));
      aVLTree0.find(3448);
      aVLTree0.insert((-1));
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.insert((-1498));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(2936);
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.delete(2147);
      aVLTree0.insert((-1240));
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1441);
      aVLTree0.delete((-372));
      aVLTree0.delete(4468);
      aVLTree0.delete(4468);
      aVLTree0.insert(0);
      aVLTree0.delete(1724);
      aVLTree0.delete(4468);
      aVLTree0.insert(1724);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      aVLTree0.find(330);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 856;
      aVLTree0.insert(856);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree aVLTree1 = new AVLTree();
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertEquals((-1), aVLTree1.height());
      assertNotNull(aVLTree1);
      
      aVLTree1.insert((-1));
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertEquals(0, aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree1.getRoot();
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertEquals(0, aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree1.getRoot();
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertEquals(0, aVLTree1.height());
      assertNotSame(aVLTree1, aVLTree0);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(0, aVLTree1.height());
      
      aVLTree_Node0.key = (-1);
      assertEquals(0, aVLTree1.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(1, int1);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, aVLTree1.height());
      assertNotSame(aVLTree0, aVLTree1);
      assertNotSame(aVLTree1, aVLTree0);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      
      int int2 = 0;
      aVLTree1.insert(int2);
      aVLTree1.delete(int2);
      aVLTree0.getRoot();
      aVLTree1.getRoot();
      aVLTree0.delete(int0);
      aVLTree1.insert(int2);
      int int3 = (-767);
      aVLTree1.find(int3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3133);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-515));
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(707);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(318);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(318);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(2871);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-386));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-3912));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2915);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1064);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete(2915);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-98));
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert((-98));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-98));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-379));
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1514);
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(204);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 1;
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-1450);
      aVLTree0.delete((-1450));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1450));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-590);
      aVLTree0.insert(553);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-590));
      assertEquals(0, aVLTree0.height());
      
      int int1 = 0;
      aVLTree0.insert((-590));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(553);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(2050);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-858));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1654);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1654);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1072);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-1);
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      int int1 = 1;
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(2602);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(308);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2602);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1848));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-878);
      aVLTree0.insert((-878));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1124));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert((-807));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete((-878));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1240));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(12);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1240));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.insert(1);
      aVLTree0.insert((-1));
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert((-1533));
      aVLTree0.insert(0);
      aVLTree0.delete((-1533));
      aVLTree0.find((-543));
      aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-4052));
      aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-4052));
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int1);
  }
}
